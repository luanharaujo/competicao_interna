/*teste apenas para andar para frente e parar com o sensor de distancia*/

/*definições*/
//motores
#define ME OUT_A
#define MD OUT_C
#define MDE OUT_AC

//sensores
#define US IN_4
#define LSD IN_2
#define LSE IN_3
#define RGB IN_1

int cont;

//variaveis globais
int potd, pote;// potencia do motor direito e do motor esquerdo respectivamente

//Flags
int andar;

int my_tc_d;
int my_tc_e;

//função principal
task main()
{
 cont = 0;

 /*setando sensores*/
 SetSensorLowspeed(US);

 //inicializando as postências
 potd = -80;
 pote= -80;

 //zerando os contadores
 ResetTachoCount(MD);
 ResetTachoCount(ME);
 my_tc_d = 0;
 my_tc_e = 0;

 while(1)//void loop
 {



  if(SensorUS(US)>=15)//condição para parar robo de forma fácil nos testes
  {
   //andar
   andar = 1;
   }
  else
  {
   //parar
   andar = 0;
  }

  my_tc_d += MotorTachoCount(MD);
  ResetTachoCount(MD);
  my_tc_e += MotorTachoCount(ME);
  ResetTachoCount(ME);
  NumOut(0,LCD_LINE1,-my_tc_d);
  NumOut(0,LCD_LINE2,-my_tc_e);
  

  if(andar)
  {
   cont++;
   if(cont>=500)
   {
    cont = 0;
    if(abs(my_tc_d - my_tc_e)>5)
    {
      if(my_tc_d < my_tc_e)
      {
        if(pote > -85)
        {
         pote--;
        }
        else
        {
         //if(potd<-84)
             potd++;
        }
      }
      else if(my_tc_e < my_tc_d)
      {
        if(potd > -85)
        {
         potd--;
        }
        else
        {
         //if(pote<-84)
            pote++;
        }
      }

     my_tc_d = 0;
     ResetTachoCount(MD);
     my_tc_e = 0;
     ResetTachoCount(ME);
    }
    
    }//segura ciclos

    my_tc_e += MotorTachoCount(ME);
    //ResetTachoCount(ME);
    OnFwd(ME,pote);
    my_tc_d += MotorTachoCount(MD);
    //ResetTachoCount(MD);
    OnFwd(MD,potd);



  }
  else
  {
   Off(MDE);
  }


 }
}
